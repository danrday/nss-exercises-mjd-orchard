{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/createPrototypes.js","javascripts/domReference.js","javascripts/growCommands.js","javascripts/growSpecs.js","javascripts/main.js","javascripts/orchard.js","javascripts/plant.js","javascripts/tree.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\"\n\n\nlet Tree = require(\"./tree\");\nlet Plant = require(\"./plant\");\n\nTree.prototype = new Plant();\n\nvar oakTree = new Tree(\"Oak Tree\");\n\n// oakTree.increaseHeight(20);\n\nconsole.log(oakTree);\n\nvar pearTree = new Tree(\"Pear Tree\");\n\n\nmodule.exports = {oakTree, pearTree};","\"use strict\";\n\nvar $mainOutput = $(\"#mainOutput\");\n$mainOutput.html(\"ORCHARD\");\n\nmodule.exports = $mainOutput;","\"use strict\"\n\n  let oakTree = require(\"./createPrototypes.js\").oakTree\n  let pearTree = require(\"./createPrototypes.js\").pearTree\n\n  oakTree.keepGrowing(6);\n  pearTree.keepGrowing(9);\n\n\n","\"use strict\"\n\n//var 'x' is [amountPerSec, .this] passed by setInterval in Tree.keepGrowing\n\nlet $mainOutput = require(\"./domReference.js\");\n\nfunction growSpecs(x) {\n\n    x[1].keepGrowing.setCounterSeconds(1);\n\n    console.log(\"counterSeconds\", x[1].keepGrowing.getCounterSeconds());\n\n    console.log(\"x[0] = amt per sec\", x[0]);\n\n    console.log(\"x[1] = this\", x[1]);\n\n    x[1].increaseHeight(x[0]);\n\n    //adds a branch for every 10 units of height added\n    x[1].addBranches += x[0];\n\n    if (x[1].addBranches >= 10) {\n      var divByTen = (x[1].addBranches / 10)\n      divByTen = Math.floor(divByTen);\n      x[1].branches += divByTen;\n      x[1].addBranches -= (divByTen*10);\n    }\n\n    console.log(\"x[1].addBranches\", x[1].addBranches);\n    console.log(\"height\", x[1].height);\n    console.log(\"branches\", x[1].branches);\n    console.log(\"name\", x[1].name)\n\n\n    $mainOutput.append(`<div>\n    Your ${x[1].name} is ${x[1].height} cm tall, and has ${x[1].branches} branches!</div>`)\n\n\n    if(x[1].keepGrowing.getCounterSeconds() > 30) {\n    // console.log(\"GREATER THAN 5\")\n    clearInterval(x[1].keepGrowing.growInterval);\n    // };\n  }\n};\n\nmodule.exports = growSpecs;","\"use strict\";\n\nlet myOrchard = require(\"./orchard\");","\"use strict\";\n\n\nconst domReference = require(\"./domReference\");\n\nconst plant = require(\"./plant\");\nconst tree = require(\"./tree\");\nconst createPrototypes = require(\"./createPrototypes\");\nconst growSpecs = require(\"./growSpecs\");\nconst growCommands = require(\"./growCommands\");\n\n/* \n  Now, construct an object that contains a key/value pair for each\n  of those modules that we pulled into this one\n*/\nlet myOrchard = {\n  domReference, plant, tree, createPrototypes, growSpecs, growCommands\n};\n\n/*\n  Every module needs to specify what its output is. Think of this as the\n  return statement in a function. What are we returning for use by other\n  modules in the application?\n */\nmodule.exports = myOrchard;","\"use strict\"\n\nfunction Plant() {\n\n  this.height = 0;\n\n  //var to hold all new growth units, so that we can add a branch for every 10 growth units\n  this.addBranches = null;\n\n  this.increaseHeight = function (growth) {\n\n    this.height += growth;\n  };\n   \n    this.decreaseHeight = function(decrease) {\n     let x = this.height;\n     x -= decrease;\n\n    return x;\n  };\n\n};\n\nmodule.exports = Plant;","\"use strict\"\n\nlet growSpecs = require(\"./growSpecs.js\");\n\nfunction Tree(name) {\n\n  this.name = name;\n\n  this.branches = 0;\n\n  this.grow = function(amount) {\n    this.height += amount;\n    return this.height;\n  };\n\n  this.trim = function(amount) {\n    this.branches -= 1;\n    this.height -= amount;\n    return this.branches;\n  };\n\n  this.keepGrowing = function (amountPerSec) {\n  var instance = this;\n  this.keepGrowing.growInterval = setInterval(growSpecs, 1000, [amountPerSec, instance]);\n  var counterSeconds = 0;\n  this.keepGrowing.getCounterSeconds = function() {return counterSeconds};\n  this.keepGrowing.setCounterSeconds = function(x) {\n    counterSeconds += x;\n    }\n  };\n\n};\n\nmodule.exports = Tree;"]}